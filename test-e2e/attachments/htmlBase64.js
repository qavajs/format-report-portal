module.exports = `<!DOCTYPE html>
<html lang="en">
    <head>
        <!-- Required meta tags -->
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
        <style>
            .violationCard {
                width: 100%;
                margin-bottom: 1rem;
            }
            .violationCardLine {
                display: flex;
                justify-content: space-between;
                align-items: start;
            }
            .learnMore {
                margin-bottom: 0.75rem;
                white-space: nowrap;
                color: #2557a7;
            }
            .card-link {
                color: #2557a7;
            }
            .violationNode {
                font-size: 0.75rem;
            }
            .wrapBreakWord {
                word-break: break-word;
            }
            .summary {
                font-size: 1rem;
            }
            .summarySection {
                margin: 0.5rem 0;
            }
            .hljs {
                white-space: pre-wrap;
                width: 100%;
                background: #f0f0f0;
            }
            p {
                margin-top: 0.3rem;
            }
            li {
                line-height: 1.618;
            }
        </style>
        <!-- Bootstrap CSS -->
        <link
            rel="stylesheet"
            href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
            integrity="sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z"
            crossorigin="anonymous"
        />
        <script
            src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
            integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
            crossorigin="anonymous"
        ></script>
        <script
            src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"
            integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q"
            crossorigin="anonymous"
        ></script>
        <script
            src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"
            integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"
            crossorigin="anonymous"
        ></script>
        <link
            rel="stylesheet"
            href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.5.0/styles/stackoverflow-light.min.css"
        />
        <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.5.0/highlight.min.js"></script>
        <link
            rel="icon"
            href="https://www.deque.com/wp-content/uploads/2018/03/cropped-DQ_SecondaryLogo_HeroBlue_RGB-1-32x32.png"
            sizes="32x32"
        />
        <title>AXE Accessibility Results</title>
    </head>
    <body>
        <div style="padding: 2rem">
            <h3>
                AXE Accessibility Results for I need only raw HTML project
            </h3>
            <div class="summarySection">
                <div class="summary">
                    Page URL:
                    <a href="https:&#x2F;&#x2F;dequeuniversity.com&#x2F;demo&#x2F;mars&#x2F;" target="_blank" class="card-link">https:&#x2F;&#x2F;dequeuniversity.com&#x2F;demo&#x2F;mars&#x2F;</a>
                    <br />
                </div>
            </div>
            <h5>axe-core found <span class="badge badge-warning">79</span> violations</h5>
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th style="width: 5%">#</th>
                        <th style="width: 45%">Description</th>
                        <th style="width: 15%">Axe rule ID</th>
                        <th style="width: 23%">WCAG</th>
                        <th style="width: 7%">Impact</th>
                        <th style="width: 5%">Count</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th scope="row"><a href="#1" class="card-link">1</a></th>
                        <td>Buttons must have discernible text</td>
                        <td>button-name</td>
                        <td>WCAG 2 Level A, WCAG 4.1.2</td>
                        <td>critical</td>
                        <td>1</td>
                    </tr>
                    <tr>
                        <th scope="row"><a href="#2" class="card-link">2</a></th>
                        <td>Elements must have sufficient color contrast</td>
                        <td>color-contrast</td>
                        <td>WCAG 2 Level AA, WCAG 1.4.3</td>
                        <td>serious</td>
                        <td>3</td>
                    </tr>
                    <tr>
                        <th scope="row"><a href="#3" class="card-link">3</a></th>
                        <td>IDs of active elements must be unique</td>
                        <td>duplicate-id-active</td>
                        <td>WCAG 2 Level A, WCAG 4.1.1</td>
                        <td>serious</td>
                        <td>2</td>
                    </tr>
                    <tr>
                        <th scope="row"><a href="#4" class="card-link">4</a></th>
                        <td>IDs used in ARIA and labels must be unique</td>
                        <td>duplicate-id-aria</td>
                        <td>WCAG 2 Level A, WCAG 4.1.1</td>
                        <td>critical</td>
                        <td>1</td>
                    </tr>
                    <tr>
                        <th scope="row"><a href="#5" class="card-link">5</a></th>
                        <td>id attribute value must be unique</td>
                        <td>duplicate-id</td>
                        <td>WCAG 2 Level A, WCAG 4.1.1</td>
                        <td>minor</td>
                        <td>10</td>
                    </tr>
                    <tr>
                        <th scope="row"><a href="#6" class="card-link">6</a></th>
                        <td>Frames must have an accessible name</td>
                        <td>frame-title</td>
                        <td>WCAG 2 Level A, WCAG 4.1.2</td>
                        <td>serious</td>
                        <td>1</td>
                    </tr>
                    <tr>
                        <th scope="row"><a href="#7" class="card-link">7</a></th>
                        <td>&lt;html&gt; element must have a lang attribute</td>
                        <td>html-has-lang</td>
                        <td>WCAG 2 Level A, WCAG 3.1.1</td>
                        <td>serious</td>
                        <td>1</td>
                    </tr>
                    <tr>
                        <th scope="row"><a href="#8" class="card-link">8</a></th>
                        <td>Images must have alternate text</td>
                        <td>image-alt</td>
                        <td>WCAG 2 Level A, WCAG 1.1.1</td>
                        <td>critical</td>
                        <td>4</td>
                    </tr>
                    <tr>
                        <th scope="row"><a href="#9" class="card-link">9</a></th>
                        <td>Ensures landmarks are unique</td>
                        <td>landmark-unique</td>
                        <td>Best practice</td>
                        <td>moderate</td>
                        <td>1</td>
                    </tr>
                    <tr>
                        <th scope="row"><a href="#10" class="card-link">10</a></th>
                        <td>Links must have discernible text</td>
                        <td>link-name</td>
                        <td>WCAG 2 Level A, WCAG 4.1.2, WCAG 2.4.4</td>
                        <td>serious</td>
                        <td>8</td>
                    </tr>
                    <tr>
                        <th scope="row"><a href="#11" class="card-link">11</a></th>
                        <td>All page content should be contained by landmarks</td>
                        <td>region</td>
                        <td>Best practice</td>
                        <td>moderate</td>
                        <td>41</td>
                    </tr>
                    <tr>
                        <th scope="row"><a href="#12" class="card-link">12</a></th>
                        <td>Select element must have an accessible name</td>
                        <td>select-name</td>
                        <td>WCAG 2 Level A, WCAG 4.1.2</td>
                        <td>critical</td>
                        <td>2</td>
                    </tr>
                    <tr>
                        <th scope="row"><a href="#13" class="card-link">13</a></th>
                        <td>Elements should not have tabindex greater than zero</td>
                        <td>tabindex</td>
                        <td>Best practice</td>
                        <td>serious</td>
                        <td>4</td>
                    </tr>
                </tbody>
            </table>
            <h3>Failed</h3>
            <div class="card violationCard">
                <div class="card-body">
                    <div class="violationCardLine">
                        <h5 class="card-title violationCardTitleItem">
                            <a id="1">1.</a> Buttons must have discernible text
                        </h5>
                        <a
                            href="https:&#x2F;&#x2F;dequeuniversity.com&#x2F;rules&#x2F;axe&#x2F;4.6&#x2F;button-name?application&#x3D;playwright"
                            target="_blank"
                            class="card-link violationCardTitleItem learnMore"
                            >Learn more</a
                        >
                    </div>
                    <div class="violationCardLine">
                        <h6 class="card-subtitle mb-2 text-muted">button-name</h6>
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            WCAG 2 Level A, WCAG 4.1.2
                        </h6>
                    </div>
                    <div class="violationCardLine">
                        <p class="card-text">Ensures buttons have discernible text</p>
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            critical
                        </h6>
                    </div>
                    <div class="violationCardLine">
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            Issue Tags: 
                            <span class="badge bg-light text-dark"> cat.name-role-value </span>

                            <span class="badge bg-light text-dark"> wcag2a </span>

                            <span class="badge bg-light text-dark"> wcag412 </span>

                            <span class="badge bg-light text-dark"> section508 </span>

                            <span class="badge bg-light text-dark"> section508.22.a </span>

                            <span class="badge bg-light text-dark"> ACT </span>
                        </h6>
                    </div>
                    <div class="violationNode">
                        <table class="table table-sm table-bordered">
                            <thead>
                                <tr>
                                    <th style="width: 2%">#</th>
                                    <th style="width: 49%">Issue Description</th>
                                    <th style="width: 49%">
                                        To solve this violation, you need to...
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>1</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">.departure-date &gt; .ui-datepicker-trigger:nth-child(4)</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;button class&#x3D;&quot;ui-datepicker-trigger&quot; type&#x3D;&quot;button&quot;&gt;
&lt;!-- &lt;img title&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot; src&#x3D;&quot;&#x2F;redesign&#x2F;assets&#x2F;demo-sites&#x2F;mars&#x2F;images&#x2F;calendar.png&quot;&gt; --&gt;
&lt;&#x2F;button&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element does not have inner text that is visible to screen readers</li>
                                                <li>  aria-label attribute does not exist or is empty</li>
                                                <li>  aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty</li>
                                                <li>  Element has no title attribute</li>
                                                <li>  Element&#39;s default semantics were not overridden with role&#x3D;&quot;none&quot; or role&#x3D;&quot;presentation&quot;</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="card violationCard">
                <div class="card-body">
                    <div class="violationCardLine">
                        <h5 class="card-title violationCardTitleItem">
                            <a id="2">2.</a> Elements must have sufficient color contrast
                        </h5>
                        <a
                            href="https:&#x2F;&#x2F;dequeuniversity.com&#x2F;rules&#x2F;axe&#x2F;4.6&#x2F;color-contrast?application&#x3D;playwright"
                            target="_blank"
                            class="card-link violationCardTitleItem learnMore"
                            >Learn more</a
                        >
                    </div>
                    <div class="violationCardLine">
                        <h6 class="card-subtitle mb-2 text-muted">color-contrast</h6>
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            WCAG 2 Level AA, WCAG 1.4.3
                        </h6>
                    </div>
                    <div class="violationCardLine">
                        <p class="card-text">Ensures the contrast between foreground and background colors meets WCAG 2 AA contrast ratio thresholds</p>
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            serious
                        </h6>
                    </div>
                    <div class="violationCardLine">
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            Issue Tags: 
                            <span class="badge bg-light text-dark"> cat.color </span>

                            <span class="badge bg-light text-dark"> wcag2aa </span>

                            <span class="badge bg-light text-dark"> wcag143 </span>

                            <span class="badge bg-light text-dark"> ACT </span>
                        </h6>
                    </div>
                    <div class="violationNode">
                        <table class="table table-sm table-bordered">
                            <thead>
                                <tr>
                                    <th style="width: 2%">#</th>
                                    <th style="width: 49%">Issue Description</th>
                                    <th style="width: 49%">
                                        To solve this violation, you need to...
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>1</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">a[href&#x3D;&quot;mars2.html?a&#x3D;be_bold&quot;] &gt; h3</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;h3&gt;Be Bold...&lt;&#x2F;h3&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element has insufficient color contrast of 4.31 (foreground color: #ff9999, background color: #344b6e, font size: 13.5pt (18px), font weight: normal). Expected contrast ratio of 4.5:1</li>
                                            </ul>
                                        </div>
                                        <p><strong>Related node:</strong></p>
                                        <pre><code class="css text-wrap">body</code></pre>
                                    </td>
                                </tr>
                                <tr>
                                    <td>2</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">a[href&#x3D;&quot;mars2.html?a&#x3D;countdown&quot;] &gt; h3</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;h3&gt;Countdown...&lt;&#x2F;h3&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element has insufficient color contrast of 1.87 (foreground color: #067ab4, background color: #344b6e, font size: 13.5pt (18px), font weight: normal). Expected contrast ratio of 4.5:1</li>
                                            </ul>
                                        </div>
                                        <p><strong>Related node:</strong></p>
                                        <pre><code class="css text-wrap">body</code></pre>
                                    </td>
                                </tr>
                                <tr>
                                    <td>3</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">a[href&#x3D;&quot;mars2.html?a&#x3D;blast_off&quot;] &gt; h3</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;h3&gt;Blast Off!&lt;&#x2F;h3&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element has insufficient color contrast of 2.83 (foreground color: #46a546, background color: #344b6e, font size: 13.5pt (18px), font weight: normal). Expected contrast ratio of 4.5:1</li>
                                            </ul>
                                        </div>
                                        <p><strong>Related node:</strong></p>
                                        <pre><code class="css text-wrap">body</code></pre>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="card violationCard">
                <div class="card-body">
                    <div class="violationCardLine">
                        <h5 class="card-title violationCardTitleItem">
                            <a id="3">3.</a> IDs of active elements must be unique
                        </h5>
                        <a
                            href="https:&#x2F;&#x2F;dequeuniversity.com&#x2F;rules&#x2F;axe&#x2F;4.6&#x2F;duplicate-id-active?application&#x3D;playwright"
                            target="_blank"
                            class="card-link violationCardTitleItem learnMore"
                            >Learn more</a
                        >
                    </div>
                    <div class="violationCardLine">
                        <h6 class="card-subtitle mb-2 text-muted">duplicate-id-active</h6>
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            WCAG 2 Level A, WCAG 4.1.1
                        </h6>
                    </div>
                    <div class="violationCardLine">
                        <p class="card-text">Ensures every id attribute value of active elements is unique</p>
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            serious
                        </h6>
                    </div>
                    <div class="violationCardLine">
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            Issue Tags: 
                            <span class="badge bg-light text-dark"> cat.parsing </span>

                            <span class="badge bg-light text-dark"> wcag2a </span>

                            <span class="badge bg-light text-dark"> wcag411 </span>
                        </h6>
                    </div>
                    <div class="violationNode">
                        <table class="table table-sm table-bordered">
                            <thead>
                                <tr>
                                    <th style="width: 2%">#</th>
                                    <th style="width: 49%">Issue Description</th>
                                    <th style="width: 49%">
                                        To solve this violation, you need to...
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>1</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#passenger0 &gt; .age-range.wrapper &gt; .traveler-type</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;select id&#x3D;&quot;traveler0&quot; class&#x3D;&quot;traveler-type&quot;&gt;
&lt;option value&#x3D;&quot;0&quot;&gt;Adult (26+)&lt;&#x2F;option&gt;
&lt;option value&#x3D;&quot;1&quot;&gt;Youth (12-25)&lt;&#x2F;option&gt;
&lt;option value&#x3D;&quot;2&quot;&gt;Child (4-11)&lt;&#x2F;option&gt;
&lt;option value&#x3D;&quot;3&quot;&gt;Senior (60+)&lt;&#x2F;option&gt;
&lt;&#x2F;select&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Document has active elements with the same id attribute: traveler0</li>
                                            </ul>
                                        </div>
                                        <p><strong>Related node:</strong></p>
                                        <pre><code class="css text-wrap">select[name&#x3D;&quot;paxAge0&quot;]</code></pre>
                                    </td>
                                </tr>
                                <tr>
                                    <td>2</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">.active</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;a target&#x3D;&quot;player&quot; data-text&#x3D;&quot;Life was possible on Mars&quot; class&#x3D;&quot;fader first active&quot; href&#x3D;&quot;http:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;OagLGti_hTE?controls&#x3D;1&amp;amp;showinfo&#x3D;1&amp;amp;modestbranding&#x3D;0&amp;amp;wmode&#x3D;opaque&amp;amp;enablejsapi&#x3D;1&quot; id&#x3D;&quot;default&quot;&gt;&lt;&#x2F;a&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Document has active elements with the same id attribute: default</li>
                                            </ul>
                                        </div>
                                        <p><strong>Related node:</strong></p>
                                        <pre><code class="css text-wrap">a[data-text&#x3D;&quot;Why Mars died&quot;]</code></pre>
                                        <pre><code class="css text-wrap">a[data-text&#x3D;&quot;The world that never was&quot;]</code></pre>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="card violationCard">
                <div class="card-body">
                    <div class="violationCardLine">
                        <h5 class="card-title violationCardTitleItem">
                            <a id="4">4.</a> IDs used in ARIA and labels must be unique
                        </h5>
                        <a
                            href="https:&#x2F;&#x2F;dequeuniversity.com&#x2F;rules&#x2F;axe&#x2F;4.6&#x2F;duplicate-id-aria?application&#x3D;playwright"
                            target="_blank"
                            class="card-link violationCardTitleItem learnMore"
                            >Learn more</a
                        >
                    </div>
                    <div class="violationCardLine">
                        <h6 class="card-subtitle mb-2 text-muted">duplicate-id-aria</h6>
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            WCAG 2 Level A, WCAG 4.1.1
                        </h6>
                    </div>
                    <div class="violationCardLine">
                        <p class="card-text">Ensures every id attribute value used in ARIA and in labels is unique</p>
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            critical
                        </h6>
                    </div>
                    <div class="violationCardLine">
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            Issue Tags: 
                            <span class="badge bg-light text-dark"> cat.parsing </span>

                            <span class="badge bg-light text-dark"> wcag2a </span>

                            <span class="badge bg-light text-dark"> wcag411 </span>
                        </h6>
                    </div>
                    <div class="violationNode">
                        <table class="table table-sm table-bordered">
                            <thead>
                                <tr>
                                    <th style="width: 2%">#</th>
                                    <th style="width: 49%">Issue Description</th>
                                    <th style="width: 49%">
                                        To solve this violation, you need to...
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>1</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#passenger0 &gt; .youth-age.wrapper &gt; .age</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;select id&#x3D;&quot;age0&quot; class&#x3D;&quot;age&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Document has multiple elements referenced with ARIA with the same id attribute: age0</li>
                                            </ul>
                                        </div>
                                        <p><strong>Related node:</strong></p>
                                        <pre><code class="css text-wrap">.age[name&#x3D;&quot;youthAge0&quot;]</code></pre>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="card violationCard">
                <div class="card-body">
                    <div class="violationCardLine">
                        <h5 class="card-title violationCardTitleItem">
                            <a id="5">5.</a> id attribute value must be unique
                        </h5>
                        <a
                            href="https:&#x2F;&#x2F;dequeuniversity.com&#x2F;rules&#x2F;axe&#x2F;4.6&#x2F;duplicate-id?application&#x3D;playwright"
                            target="_blank"
                            class="card-link violationCardTitleItem learnMore"
                            >Learn more</a
                        >
                    </div>
                    <div class="violationCardLine">
                        <h6 class="card-subtitle mb-2 text-muted">duplicate-id</h6>
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            WCAG 2 Level A, WCAG 4.1.1
                        </h6>
                    </div>
                    <div class="violationCardLine">
                        <p class="card-text">Ensures every id attribute value is unique</p>
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            minor
                        </h6>
                    </div>
                    <div class="violationCardLine">
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            Issue Tags: 
                            <span class="badge bg-light text-dark"> cat.parsing </span>

                            <span class="badge bg-light text-dark"> wcag2a </span>

                            <span class="badge bg-light text-dark"> wcag411 </span>
                        </h6>
                    </div>
                    <div class="violationNode">
                        <table class="table table-sm table-bordered">
                            <thead>
                                <tr>
                                    <th style="width: 2%">#</th>
                                    <th style="width: 49%">Issue Description</th>
                                    <th style="width: 49%">
                                        To solve this violation, you need to...
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>1</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">.loginnow &gt; .container-fluid-full</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;div id&#x3D;&quot;control-panel&quot; class&#x3D;&quot;container-fluid-full&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Document has multiple static elements with the same id attribute: control-panel</li>
                                            </ul>
                                        </div>
                                        <p><strong>Related node:</strong></p>
                                        <pre><code class="css text-wrap">.loggedin &gt; .container-fluid-full</code></pre>
                                    </td>
                                </tr>
                                <tr>
                                    <td>2</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">.loginnow &gt; .container-fluid-full &gt; .container &gt; .span5.pull-left.left-first &gt; .pull-left:nth-child(1)</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;nav id&#x3D;&quot;left-control-nav&quot; class&#x3D;&quot;pull-left&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Document has multiple static elements with the same id attribute: left-control-nav</li>
                                            </ul>
                                        </div>
                                        <p><strong>Related node:</strong></p>
                                        <pre><code class="css text-wrap">.loggedin &gt; .container-fluid-full &gt; .container &gt; .span5.pull-left.left-first &gt; .pull-left:nth-child(1)</code></pre>
                                    </td>
                                </tr>
                                <tr>
                                    <td>3</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">.loginnow &gt; .container-fluid-full &gt; .container &gt; .span5.pull-left.left-first &gt; .pull-left:nth-child(2)</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;div id&#x3D;&quot;search-bar&quot; class&#x3D;&quot;pull-left&quot;&gt;
&lt;form id&#x3D;&quot;search&quot; action&#x3D;&quot;&#x2F;demo&#x2F;mars&#x2F;mars2&quot; method&#x3D;&quot;get&quot;&gt;
&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;fn&quot; value&#x3D;&quot;Search&quot;&gt;
&lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;search&quot; name&#x3D;&quot;query&quot; placeholder&#x3D;&quot;search&quot;&gt;
&lt;input type&#x3D;&quot;submit&quot; class&#x3D;&quot;control-search&quot;&gt;
&lt;&#x2F;form&gt;
&lt;&#x2F;div&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Document has multiple static elements with the same id attribute: search-bar</li>
                                            </ul>
                                        </div>
                                        <p><strong>Related node:</strong></p>
                                        <pre><code class="css text-wrap">.loggedin &gt; .container-fluid-full &gt; .container &gt; .span5.pull-left.left-first &gt; .pull-left:nth-child(2)</code></pre>
                                    </td>
                                </tr>
                                <tr>
                                    <td>4</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">.loginnow &gt; .container-fluid-full &gt; .container &gt; .span5.pull-left.left-first &gt; .pull-left:nth-child(2) &gt; form[method&#x3D;&quot;get&quot;][action&#x3D;&quot;&#x2F;demo&#x2F;mars&#x2F;mars2&quot;]</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;form id&#x3D;&quot;search&quot; action&#x3D;&quot;&#x2F;demo&#x2F;mars&#x2F;mars2&quot; method&#x3D;&quot;get&quot;&gt;
&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;fn&quot; value&#x3D;&quot;Search&quot;&gt;
&lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;search&quot; name&#x3D;&quot;query&quot; placeholder&#x3D;&quot;search&quot;&gt;
&lt;input type&#x3D;&quot;submit&quot; class&#x3D;&quot;control-search&quot;&gt;
&lt;&#x2F;form&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Document has multiple static elements with the same id attribute: search</li>
                                            </ul>
                                        </div>
                                        <p><strong>Related node:</strong></p>
                                        <pre><code class="css text-wrap">.loggedin &gt; .container-fluid-full &gt; .container &gt; .span5.pull-left.left-first &gt; .pull-left:nth-child(2) &gt; form[method&#x3D;&quot;get&quot;][action&#x3D;&quot;&#x2F;demo&#x2F;mars&#x2F;mars2&quot;]</code></pre>
                                    </td>
                                </tr>
                                <tr>
                                    <td>5</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">.loginnow &gt; .container-fluid-full &gt; .container &gt; .span7.pull-right &gt; .pull-right</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;nav id&#x3D;&quot;right-control-nav&quot; class&#x3D;&quot;pull-right&quot; style&#x3D;&quot;display: inline;&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Document has multiple static elements with the same id attribute: right-control-nav</li>
                                            </ul>
                                        </div>
                                        <p><strong>Related node:</strong></p>
                                        <pre><code class="css text-wrap">.loggedin &gt; .container-fluid-full &gt; .container &gt; .span7.pull-right &gt; .pull-right</code></pre>
                                    </td>
                                </tr>
                                <tr>
                                    <td>6</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#left-column &gt; div:nth-child(1)</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;div id&#x3D;&quot;vap-section&quot;&gt;
&lt;h1 style&#x3D;&quot;color:#eee;&quot;&gt;Destination Mars &lt;&#x2F;h1&gt;
&lt;h2 style&#x3D;&quot;color:#acbad0;&quot;&gt;A trip to Mars starts in your imagination. Are you bold enough, brave enough, &lt;strong&gt;foolish enough?&lt;&#x2F;strong&gt; We are. You belong on Mars with fools like us. Most of us don&#39;t bite. Much.&lt;&#x2F;h2&gt;&lt;&#x2F;div&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Document has multiple static elements with the same id attribute: vap-section</li>
                                            </ul>
                                        </div>
                                        <p><strong>Related node:</strong></p>
                                        <pre><code class="css text-wrap">#left-column &gt; div:nth-child(2)</code></pre>
                                    </td>
                                </tr>
                                <tr>
                                    <td>7</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#select-country &gt; input[name&#x3D;&quot;nCountries&quot;][type&#x3D;&quot;hidden&quot;]</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;input type&#x3D;&quot;hidden&quot; id&#x3D;&quot;nCountries&quot; name&#x3D;&quot;nCountries&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Document has multiple static elements with the same id attribute: nCountries</li>
                                            </ul>
                                        </div>
                                        <p><strong>Related node:</strong></p>
                                        <pre><code class="css text-wrap">input[name&#x3D;&quot;nCountries&quot;][value&#x3D;&quot;1&quot;][type&#x3D;&quot;hidden&quot;]</code></pre>
                                    </td>
                                </tr>
                                <tr>
                                    <td>8</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">.middle.widget-container:nth-child(13)</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;div id&#x3D;&quot;passenger-select&quot; class&#x3D;&quot;widget-container middle&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Document has multiple static elements with the same id attribute: passenger-select</li>
                                            </ul>
                                        </div>
                                        <p><strong>Related node:</strong></p>
                                        <pre><code class="css text-wrap">.middle.widget-container:nth-child(8)</code></pre>
                                    </td>
                                </tr>
                                <tr>
                                    <td>9</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">.middle.widget-container:nth-child(13) &gt; .interior-container &gt; div:nth-child(3)</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;div id&#x3D;&quot;passengers&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Document has multiple static elements with the same id attribute: passengers</li>
                                            </ul>
                                        </div>
                                        <p><strong>Related node:</strong></p>
                                        <pre><code class="css text-wrap">.middle.widget-container:nth-child(8) &gt; .interior-container &gt; div</code></pre>
                                    </td>
                                </tr>
                                <tr>
                                    <td>10</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">.ui-datepicker.ui-helper-clearfix.ui-corner-all:nth-child(33)</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;div id&#x3D;&quot;ui-datepicker-div&quot; class&#x3D;&quot;ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all&quot;&gt;&lt;&#x2F;div&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Document has multiple static elements with the same id attribute: ui-datepicker-div</li>
                                            </ul>
                                        </div>
                                        <p><strong>Related node:</strong></p>
                                        <pre><code class="css text-wrap">.ui-datepicker.ui-helper-clearfix.ui-corner-all:nth-child(38)</code></pre>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="card violationCard">
                <div class="card-body">
                    <div class="violationCardLine">
                        <h5 class="card-title violationCardTitleItem">
                            <a id="6">6.</a> Frames must have an accessible name
                        </h5>
                        <a
                            href="https:&#x2F;&#x2F;dequeuniversity.com&#x2F;rules&#x2F;axe&#x2F;4.6&#x2F;frame-title?application&#x3D;playwright"
                            target="_blank"
                            class="card-link violationCardTitleItem learnMore"
                            >Learn more</a
                        >
                    </div>
                    <div class="violationCardLine">
                        <h6 class="card-subtitle mb-2 text-muted">frame-title</h6>
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            WCAG 2 Level A, WCAG 4.1.2
                        </h6>
                    </div>
                    <div class="violationCardLine">
                        <p class="card-text">Ensures &lt;iframe&gt; and &lt;frame&gt; elements have an accessible name</p>
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            serious
                        </h6>
                    </div>
                    <div class="violationCardLine">
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            Issue Tags: 
                            <span class="badge bg-light text-dark"> cat.text-alternatives </span>

                            <span class="badge bg-light text-dark"> wcag2a </span>

                            <span class="badge bg-light text-dark"> wcag412 </span>

                            <span class="badge bg-light text-dark"> section508 </span>

                            <span class="badge bg-light text-dark"> section508.22.i </span>
                        </h6>
                    </div>
                    <div class="violationNode">
                        <table class="table table-sm table-bordered">
                            <thead>
                                <tr>
                                    <th style="width: 2%">#</th>
                                    <th style="width: 49%">Issue Description</th>
                                    <th style="width: 49%">
                                        To solve this violation, you need to...
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>1</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#fafbba78</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;iframe id&#x3D;&quot;fafbba78&quot; name&#x3D;&quot;f2bc5e72d&quot; scrolling&#x3D;&quot;no&quot; style&#x3D;&quot;border: none; overflow: hidden; height: 62px; width: 292px;&quot; class&#x3D;&quot;fb_ltr&quot; src&#x3D;&quot;&#x2F;assets&#x2F;demo-sites&#x2F;mars&#x2F;js&#x2F;likebox.html&quot;&gt;&lt;&#x2F;iframe&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element has no title attribute</li>
                                                <li>  aria-label attribute does not exist or is empty</li>
                                                <li>  aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty</li>
                                                <li>  Element&#39;s default semantics were not overridden with role&#x3D;&quot;none&quot; or role&#x3D;&quot;presentation&quot;</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="card violationCard">
                <div class="card-body">
                    <div class="violationCardLine">
                        <h5 class="card-title violationCardTitleItem">
                            <a id="7">7.</a> &lt;html&gt; element must have a lang attribute
                        </h5>
                        <a
                            href="https:&#x2F;&#x2F;dequeuniversity.com&#x2F;rules&#x2F;axe&#x2F;4.6&#x2F;html-has-lang?application&#x3D;playwright"
                            target="_blank"
                            class="card-link violationCardTitleItem learnMore"
                            >Learn more</a
                        >
                    </div>
                    <div class="violationCardLine">
                        <h6 class="card-subtitle mb-2 text-muted">html-has-lang</h6>
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            WCAG 2 Level A, WCAG 3.1.1
                        </h6>
                    </div>
                    <div class="violationCardLine">
                        <p class="card-text">Ensures every HTML document has a lang attribute</p>
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            serious
                        </h6>
                    </div>
                    <div class="violationCardLine">
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            Issue Tags: 
                            <span class="badge bg-light text-dark"> cat.language </span>

                            <span class="badge bg-light text-dark"> wcag2a </span>

                            <span class="badge bg-light text-dark"> wcag311 </span>

                            <span class="badge bg-light text-dark"> ACT </span>
                        </h6>
                    </div>
                    <div class="violationNode">
                        <table class="table table-sm table-bordered">
                            <thead>
                                <tr>
                                    <th style="width: 2%">#</th>
                                    <th style="width: 49%">Issue Description</th>
                                    <th style="width: 49%">
                                        To solve this violation, you need to...
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>1</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">html</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;html class&#x3D;&quot; js no-flexbox flexbox-legacy canvas canvastext webgl no-touch geolocation postmessage websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths js no-flexbox flexbox-legacy canvas canvastext webgl no-touch geolocation postmessage websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers no-applicationcache svg inlinesvg smil svgclippaths&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  The &lt;html&gt; element does not have a lang attribute</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="card violationCard">
                <div class="card-body">
                    <div class="violationCardLine">
                        <h5 class="card-title violationCardTitleItem">
                            <a id="8">8.</a> Images must have alternate text
                        </h5>
                        <a
                            href="https:&#x2F;&#x2F;dequeuniversity.com&#x2F;rules&#x2F;axe&#x2F;4.6&#x2F;image-alt?application&#x3D;playwright"
                            target="_blank"
                            class="card-link violationCardTitleItem learnMore"
                            >Learn more</a
                        >
                    </div>
                    <div class="violationCardLine">
                        <h6 class="card-subtitle mb-2 text-muted">image-alt</h6>
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            WCAG 2 Level A, WCAG 1.1.1
                        </h6>
                    </div>
                    <div class="violationCardLine">
                        <p class="card-text">Ensures &lt;img&gt; elements have alternate text or a role of none or presentation</p>
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            critical
                        </h6>
                    </div>
                    <div class="violationCardLine">
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            Issue Tags: 
                            <span class="badge bg-light text-dark"> cat.text-alternatives </span>

                            <span class="badge bg-light text-dark"> wcag2a </span>

                            <span class="badge bg-light text-dark"> wcag111 </span>

                            <span class="badge bg-light text-dark"> section508 </span>

                            <span class="badge bg-light text-dark"> section508.22.a </span>

                            <span class="badge bg-light text-dark"> ACT </span>
                        </h6>
                    </div>
                    <div class="violationNode">
                        <table class="table table-sm table-bordered">
                            <thead>
                                <tr>
                                    <th style="width: 2%">#</th>
                                    <th style="width: 49%">Issue Description</th>
                                    <th style="width: 49%">
                                        To solve this violation, you need to...
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>1</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">img[src$&#x3D;&quot;seg&quot;]</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;img src&#x3D;&quot;&#x2F;assets&#x2F;demo-sites&#x2F;mars&#x2F;js&#x2F;seg&quot; width&#x3D;&quot;1&quot; height&#x3D;&quot;1&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element does not have an alt attribute</li>
                                                <li>  aria-label attribute does not exist or is empty</li>
                                                <li>  aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty</li>
                                                <li>  Element has no title attribute</li>
                                                <li>  Element&#39;s default semantics were not overridden with role&#x3D;&quot;none&quot; or role&#x3D;&quot;presentation&quot;</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>2</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">li:nth-child(1) &gt; a[href&#x3D;&quot;mars2.html?a&#x3D;crater_adventure&quot;] &gt; img[width&#x3D;&quot;210&quot;][height&#x3D;&quot;120&quot;]</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;img src&#x3D;&quot;&#x2F;assets&#x2F;demo-sites&#x2F;mars&#x2F;images&#x2F;mars-spaceman.jpg&quot; class&#x3D;&quot;&quot; width&#x3D;&quot;210&quot; height&#x3D;&quot;120&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element does not have an alt attribute</li>
                                                <li>  aria-label attribute does not exist or is empty</li>
                                                <li>  aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty</li>
                                                <li>  Element has no title attribute</li>
                                                <li>  Element&#39;s default semantics were not overridden with role&#x3D;&quot;none&quot; or role&#x3D;&quot;presentation&quot;</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>3</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">li:nth-child(8) &gt; a[href&#x3D;&quot;mars2.html?a&#x3D;crater_adventure&quot;] &gt; img[width&#x3D;&quot;210&quot;][height&#x3D;&quot;120&quot;]</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;img src&#x3D;&quot;&#x2F;assets&#x2F;demo-sites&#x2F;mars&#x2F;images&#x2F;mars-spaceman.jpg&quot; class&#x3D;&quot;&quot; width&#x3D;&quot;210&quot; height&#x3D;&quot;120&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element does not have an alt attribute</li>
                                                <li>  aria-label attribute does not exist or is empty</li>
                                                <li>  aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty</li>
                                                <li>  Element has no title attribute</li>
                                                <li>  Element&#39;s default semantics were not overridden with role&#x3D;&quot;none&quot; or role&#x3D;&quot;presentation&quot;</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>4</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">li:nth-child(15) &gt; a[href&#x3D;&quot;mars2.html?a&#x3D;crater_adventure&quot;] &gt; img[width&#x3D;&quot;210&quot;][height&#x3D;&quot;120&quot;]</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;img src&#x3D;&quot;&#x2F;assets&#x2F;demo-sites&#x2F;mars&#x2F;images&#x2F;mars-spaceman.jpg&quot; class&#x3D;&quot;&quot; width&#x3D;&quot;210&quot; height&#x3D;&quot;120&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element does not have an alt attribute</li>
                                                <li>  aria-label attribute does not exist or is empty</li>
                                                <li>  aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty</li>
                                                <li>  Element has no title attribute</li>
                                                <li>  Element&#39;s default semantics were not overridden with role&#x3D;&quot;none&quot; or role&#x3D;&quot;presentation&quot;</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="card violationCard">
                <div class="card-body">
                    <div class="violationCardLine">
                        <h5 class="card-title violationCardTitleItem">
                            <a id="9">9.</a> Ensures landmarks are unique
                        </h5>
                        <a
                            href="https:&#x2F;&#x2F;dequeuniversity.com&#x2F;rules&#x2F;axe&#x2F;4.6&#x2F;landmark-unique?application&#x3D;playwright"
                            target="_blank"
                            class="card-link violationCardTitleItem learnMore"
                            >Learn more</a
                        >
                    </div>
                    <div class="violationCardLine">
                        <h6 class="card-subtitle mb-2 text-muted">landmark-unique</h6>
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            Best practice
                        </h6>
                    </div>
                    <div class="violationCardLine">
                        <p class="card-text">Landmarks should have a unique role or role&#x2F;label&#x2F;title (i.e. accessible name) combination</p>
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            moderate
                        </h6>
                    </div>
                    <div class="violationCardLine">
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            Issue Tags: 
                            <span class="badge bg-light text-dark"> cat.semantics </span>

                            <span class="badge bg-light text-dark"> best-practice </span>
                        </h6>
                    </div>
                    <div class="violationNode">
                        <table class="table table-sm table-bordered">
                            <thead>
                                <tr>
                                    <th style="width: 2%">#</th>
                                    <th style="width: 49%">Issue Description</th>
                                    <th style="width: 49%">
                                        To solve this violation, you need to...
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>1</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">.loginnow &gt; .container-fluid-full &gt; .container &gt; .span5.pull-left.left-first &gt; .pull-left:nth-child(1)</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;nav id&#x3D;&quot;left-control-nav&quot; class&#x3D;&quot;pull-left&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  The landmark must have a unique aria-label, aria-labelledby, or title to make landmarks distinguishable</li>
                                            </ul>
                                        </div>
                                        <p><strong>Related node:</strong></p>
                                        <pre><code class="css text-wrap">.loginnow &gt; .container-fluid-full &gt; .container &gt; .span7.pull-right &gt; .pull-right</code></pre>
                                        <pre><code class="css text-wrap">#language-bar &gt; nav</code></pre>
                                        <pre><code class="css text-wrap">#main-nav</code></pre>
                                        <pre><code class="css text-wrap">#main-sub-nav</code></pre>
                                        <pre><code class="css text-wrap">#footer-book &gt; nav</code></pre>
                                        <pre><code class="css text-wrap">#footer-trains &gt; nav</code></pre>
                                        <pre><code class="css text-wrap">#footer-passes &gt; nav</code></pre>
                                        <pre><code class="css text-wrap">#footer-plan &gt; nav</code></pre>
                                        <pre><code class="css text-wrap">#footer-faq &gt; nav</code></pre>
                                        <pre><code class="css text-wrap">#footer-connect &gt; nav</code></pre>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="card violationCard">
                <div class="card-body">
                    <div class="violationCardLine">
                        <h5 class="card-title violationCardTitleItem">
                            <a id="10">10.</a> Links must have discernible text
                        </h5>
                        <a
                            href="https:&#x2F;&#x2F;dequeuniversity.com&#x2F;rules&#x2F;axe&#x2F;4.6&#x2F;link-name?application&#x3D;playwright"
                            target="_blank"
                            class="card-link violationCardTitleItem learnMore"
                            >Learn more</a
                        >
                    </div>
                    <div class="violationCardLine">
                        <h6 class="card-subtitle mb-2 text-muted">link-name</h6>
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            WCAG 2 Level A, WCAG 4.1.2, WCAG 2.4.4
                        </h6>
                    </div>
                    <div class="violationCardLine">
                        <p class="card-text">Ensures links have discernible text</p>
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            serious
                        </h6>
                    </div>
                    <div class="violationCardLine">
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            Issue Tags: 
                            <span class="badge bg-light text-dark"> cat.name-role-value </span>

                            <span class="badge bg-light text-dark"> wcag2a </span>

                            <span class="badge bg-light text-dark"> wcag412 </span>

                            <span class="badge bg-light text-dark"> wcag244 </span>

                            <span class="badge bg-light text-dark"> section508 </span>

                            <span class="badge bg-light text-dark"> section508.22.a </span>

                            <span class="badge bg-light text-dark"> ACT </span>
                        </h6>
                    </div>
                    <div class="violationNode">
                        <table class="table table-sm table-bordered">
                            <thead>
                                <tr>
                                    <th style="width: 2%">#</th>
                                    <th style="width: 49%">Issue Description</th>
                                    <th style="width: 49%">
                                        To solve this violation, you need to...
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>1</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">.link[href$&#x3D;&quot;mars&#x2F;#&quot;]</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;a class&#x3D;&quot;link&quot; href&#x3D;&quot;demo&#x2F;mars&#x2F;#&quot;&gt;&lt;i class&#x3D;&quot;icon-menu-home&quot;&gt;&lt;&#x2F;i&gt; &lt;&#x2F;a&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix all of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element is in tab order and does not have accessible text</li>
                                            </ul>
                                        </div>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element does not have text that is visible to screen readers</li>
                                                <li>  aria-label attribute does not exist or is empty</li>
                                                <li>  aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty</li>
                                                <li>  Element has no title attribute</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>2</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">li:nth-child(1) &gt; a[href&#x3D;&quot;mars2.html?a&#x3D;crater_adventure&quot;]</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;a href&#x3D;&quot;mars2.html?a&#x3D;crater_adventure&quot;&gt;
&lt;img src&#x3D;&quot;&#x2F;assets&#x2F;demo-sites&#x2F;mars&#x2F;images&#x2F;mars-spaceman.jpg&quot; class&#x3D;&quot;&quot; width&#x3D;&quot;210&quot; height&#x3D;&quot;120&quot;&gt;&lt;&#x2F;a&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix all of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element is in tab order and does not have accessible text</li>
                                            </ul>
                                        </div>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element does not have text that is visible to screen readers</li>
                                                <li>  aria-label attribute does not exist or is empty</li>
                                                <li>  aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty</li>
                                                <li>  Element has no title attribute</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>3</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">li:nth-child(8) &gt; a[href&#x3D;&quot;mars2.html?a&#x3D;crater_adventure&quot;]</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;a href&#x3D;&quot;mars2.html?a&#x3D;crater_adventure&quot;&gt;
&lt;img src&#x3D;&quot;&#x2F;assets&#x2F;demo-sites&#x2F;mars&#x2F;images&#x2F;mars-spaceman.jpg&quot; class&#x3D;&quot;&quot; width&#x3D;&quot;210&quot; height&#x3D;&quot;120&quot;&gt;&lt;&#x2F;a&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix all of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element is in tab order and does not have accessible text</li>
                                            </ul>
                                        </div>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element does not have text that is visible to screen readers</li>
                                                <li>  aria-label attribute does not exist or is empty</li>
                                                <li>  aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty</li>
                                                <li>  Element has no title attribute</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>4</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">li:nth-child(15) &gt; a[href&#x3D;&quot;mars2.html?a&#x3D;crater_adventure&quot;]</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;a href&#x3D;&quot;mars2.html?a&#x3D;crater_adventure&quot;&gt;
&lt;img src&#x3D;&quot;&#x2F;assets&#x2F;demo-sites&#x2F;mars&#x2F;images&#x2F;mars-spaceman.jpg&quot; class&#x3D;&quot;&quot; width&#x3D;&quot;210&quot; height&#x3D;&quot;120&quot;&gt;&lt;&#x2F;a&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix all of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element is in tab order and does not have accessible text</li>
                                            </ul>
                                        </div>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element does not have text that is visible to screen readers</li>
                                                <li>  aria-label attribute does not exist or is empty</li>
                                                <li>  aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty</li>
                                                <li>  Element has no title attribute</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>5</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">.re_ajax_p3 &gt; a[href&#x3D;&quot;mars2.html?a&#x3D;&quot;]</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;a href&#x3D;&quot;mars2.html?a&#x3D;&quot;&gt;&lt;&#x2F;a&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix all of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element is in tab order and does not have accessible text</li>
                                            </ul>
                                        </div>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element does not have text that is visible to screen readers</li>
                                                <li>  aria-label attribute does not exist or is empty</li>
                                                <li>  aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty</li>
                                                <li>  Element has no title attribute</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>6</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">.active</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;a target&#x3D;&quot;player&quot; data-text&#x3D;&quot;Life was possible on Mars&quot; class&#x3D;&quot;fader first active&quot; href&#x3D;&quot;http:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;OagLGti_hTE?controls&#x3D;1&amp;amp;showinfo&#x3D;1&amp;amp;modestbranding&#x3D;0&amp;amp;wmode&#x3D;opaque&amp;amp;enablejsapi&#x3D;1&quot; id&#x3D;&quot;default&quot;&gt;&lt;&#x2F;a&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix all of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element is in tab order and does not have accessible text</li>
                                            </ul>
                                        </div>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element does not have text that is visible to screen readers</li>
                                                <li>  aria-label attribute does not exist or is empty</li>
                                                <li>  aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty</li>
                                                <li>  Element has no title attribute</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>7</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">a[data-text&#x3D;&quot;Why Mars died&quot;]</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;a target&#x3D;&quot;player&quot; data-text&#x3D;&quot;Why Mars died&quot; class&#x3D;&quot;fader first&quot; href&#x3D;&quot;http:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;oC31pqk9sak?controls&#x3D;1&amp;amp;showinfo&#x3D;1&amp;amp;modestbranding&#x3D;0&amp;amp;wmode&#x3D;opaque&amp;amp;enablejsapi&#x3D;1&quot; id&#x3D;&quot;default&quot;&gt;&lt;&#x2F;a&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix all of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element is in tab order and does not have accessible text</li>
                                            </ul>
                                        </div>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element does not have text that is visible to screen readers</li>
                                                <li>  aria-label attribute does not exist or is empty</li>
                                                <li>  aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty</li>
                                                <li>  Element has no title attribute</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>8</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">a[data-text&#x3D;&quot;The world that never was&quot;]</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;a target&#x3D;&quot;player&quot; data-text&#x3D;&quot;The world that never was&quot; class&#x3D;&quot;fader first&quot; href&#x3D;&quot;http:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;JgMXPXdqJn8?controls&#x3D;1&amp;amp;showinfo&#x3D;1&amp;amp;modestbranding&#x3D;0&amp;amp;wmode&#x3D;opaque&amp;amp;enablejsapi&#x3D;1&quot; id&#x3D;&quot;default&quot;&gt;&lt;&#x2F;a&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix all of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element is in tab order and does not have accessible text</li>
                                            </ul>
                                        </div>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element does not have text that is visible to screen readers</li>
                                                <li>  aria-label attribute does not exist or is empty</li>
                                                <li>  aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty</li>
                                                <li>  Element has no title attribute</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="card violationCard">
                <div class="card-body">
                    <div class="violationCardLine">
                        <h5 class="card-title violationCardTitleItem">
                            <a id="11">11.</a> All page content should be contained by landmarks
                        </h5>
                        <a
                            href="https:&#x2F;&#x2F;dequeuniversity.com&#x2F;rules&#x2F;axe&#x2F;4.6&#x2F;region?application&#x3D;playwright"
                            target="_blank"
                            class="card-link violationCardTitleItem learnMore"
                            >Learn more</a
                        >
                    </div>
                    <div class="violationCardLine">
                        <h6 class="card-subtitle mb-2 text-muted">region</h6>
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            Best practice
                        </h6>
                    </div>
                    <div class="violationCardLine">
                        <p class="card-text">Ensures all page content is contained by landmarks</p>
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            moderate
                        </h6>
                    </div>
                    <div class="violationCardLine">
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            Issue Tags: 
                            <span class="badge bg-light text-dark"> cat.keyboard </span>

                            <span class="badge bg-light text-dark"> best-practice </span>
                        </h6>
                    </div>
                    <div class="violationNode">
                        <table class="table table-sm table-bordered">
                            <thead>
                                <tr>
                                    <th style="width: 2%">#</th>
                                    <th style="width: 49%">Issue Description</th>
                                    <th style="width: 49%">
                                        To solve this violation, you need to...
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>1</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">body &gt; div:nth-child(1)</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;div style&#x3D;&quot;width: 1px; height: 1px; display: inline;&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>2</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#purposeDisclaimer</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;div id&#x3D;&quot;purposeDisclaimer&quot;&gt;This web page is for demonstration purposes, to show common accessibility errors.&lt;&#x2F;div&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>3</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">.loginnow &gt; .container-fluid-full &gt; .container &gt; .span5.pull-left.left-first &gt; .pull-left:nth-child(2) &gt; form[method&#x3D;&quot;get&quot;][action&#x3D;&quot;&#x2F;demo&#x2F;mars&#x2F;mars2&quot;] &gt; .search[name&#x3D;&quot;query&quot;][placeholder&#x3D;&quot;search&quot;]</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;search&quot; name&#x3D;&quot;query&quot; placeholder&#x3D;&quot;search&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>4</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#left-column</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;div class&#x3D;&quot;span7 left-first pull-left&quot; id&#x3D;&quot;left-column&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>5</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#widget-controls</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;div id&#x3D;&quot;widget-controls&quot; class&#x3D;&quot;widget-container head&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>6</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#route-select &gt; .interior-container &gt; h3</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;h3&gt;Book your Trip&lt;&#x2F;h3&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>7</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#route-type-radio-group</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;div id&#x3D;&quot;route-type-radio-group&quot; class&#x3D;&quot;&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>8</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">.departure-city</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;span class&#x3D;&quot;wrapper departure-city&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>9</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">.arrival-city</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;span class&#x3D;&quot;wrapper arrival-city&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>10</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">label[for&#x3D;&quot;deptDate0&quot;]</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;label for&#x3D;&quot;deptDate0&quot;&gt;Departure Date&lt;&#x2F;label&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>11</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#deptDate0</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;input size&#x3D;&quot;10&quot; id&#x3D;&quot;deptDate0&quot; name&#x3D;&quot;deptDate0&quot; placeholder&#x3D;&quot;mm&#x2F;dd&#x2F;yyyy&quot; value&#x3D;&quot;&quot; tabindex&#x3D;&quot;3&quot; class&#x3D;&quot;hasDatepicker input-dept&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>12</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">.time</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;span class&#x3D;&quot;wrapper time&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>13</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">.add-leg-width.add-trip.add-buttons</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;span class&#x3D;&quot;add-buttons wrapper add-trip add-leg-width&quot;&gt;
&lt;a class&#x3D;&quot;add-leg&quot;&gt;&lt;span class&#x3D;&quot;icon&quot;&gt;&lt;&#x2F;span&gt;Add Another Trip&lt;&#x2F;a&gt;

&lt;&#x2F;span&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>14</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#pass-question-radio-group</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;div id&#x3D;&quot;pass-question-radio-group&quot; class&#x3D;&quot;&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>15</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">.middle.widget-container:nth-child(13) &gt; .interior-container &gt; h3</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;h3&gt;Who Is Traveling?&lt;&#x2F;h3&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>16</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#passenger0 &gt; .wrapper:nth-child(1)</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;span class&#x3D;&quot;wrapper&quot;&gt;
&lt;span class&#x3D;&quot;traveler-label&quot;&gt;Traveler&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>17</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#passenger0 &gt; .age-range.wrapper</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;span class&#x3D;&quot;wrapper age-range&quot;&gt;
&lt;select id&#x3D;&quot;traveler0&quot; class&#x3D;&quot;traveler-type&quot;&gt;
&lt;option value&#x3D;&quot;0&quot;&gt;Adult (26+)&lt;&#x2F;option&gt;
&lt;option value&#x3D;&quot;1&quot;&gt;Youth (12-25)&lt;&#x2F;option&gt;
&lt;option value&#x3D;&quot;2&quot;&gt;Child (4-11)&lt;&#x2F;option&gt;
&lt;option value&#x3D;&quot;3&quot;&gt;Senior (60+)&lt;&#x2F;option&gt;
&lt;&#x2F;select&gt;
&lt;&#x2F;span&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>18</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#add-traveler</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;div class&#x3D;&quot;add-buttons&quot; id&#x3D;&quot;add-traveler&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>19</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#video-text</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;h3 id&#x3D;&quot;video-text&quot;&gt;Life was possible on Mars&lt;&#x2F;h3&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>20</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#player
#player</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;div id&#x3D;&quot;player&quot; style&#x3D;&quot;width: 100%; height: 100%;&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>21</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#fafbba78
._8m &gt; table &gt; tbody &gt; tr:nth-child(1)</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;tr&gt;&lt;td&gt;&lt;span class&#x3D;&quot;fsl fwb&quot;&gt;&lt;a href&#x3D;&quot;..&#x2F;mars2.html&quot; target&#x3D;&quot;_blank&quot;&gt;Mars Commuter Express&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>22</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#fafbba78
#u_0_2</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;span id&#x3D;&quot;u_0_2&quot;&gt;378,121&lt;&#x2F;span&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>23</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">.twitter-follow-button
.btn-o</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;div class&#x3D;&quot;btn-o&quot; contextmenu&#x3D;&quot;menu&quot;&gt;&lt;a id&#x3D;&quot;follow-button&quot; target&#x3D;&quot;_blank&quot; class&#x3D;&quot;btn&quot; title&#x3D;&quot;Follow MarsCommuter on Twitter&quot; href&#x3D;&quot;mars2.html&quot;&gt;&lt;i&gt;&lt;&#x2F;i&gt;&lt;span class&#x3D;&quot;label&quot; id&#x3D;&quot;l&quot;&gt;Follow @MarsTrip1&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>24</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">.twitter-follow-button
img[src&#x3D;&quot;..&#x2F;images&#x2F;f.gif&quot;]</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;img src&#x3D;&quot;..&#x2F;images&#x2F;f.gif&quot; alt&#x3D;&quot;&quot; style&#x3D;&quot;position: absolute; height: 1px; width: 1px; top: -9999px; left: -9999px;&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>25</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">.twitter-follow-button
img[src$&#x3D;&quot;jot&quot;]</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;img src&#x3D;&quot;jot&quot; alt&#x3D;&quot;&quot; style&#x3D;&quot;position: absolute; height: 1px; width: 1px; top: -9999px; left: -9999px;&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>26</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">.social-google</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;li class&#x3D;&quot;social-google&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>27</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">.social-app</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;li class&#x3D;&quot;social-app&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>28</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">.social-community</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;li class&#x3D;&quot;social-community&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>29</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#footer-book &gt; h4</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;h4&gt;Book Your Trip&lt;&#x2F;h4&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>30</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#footer-book &gt; ul</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;ul&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>31</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#footer-trains &gt; h4</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;h4&gt;Mars Shuttles&lt;&#x2F;h4&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>32</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#footer-trains &gt; ul</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;ul&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>33</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#footer-passes &gt; h4</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;h4&gt;Mars Tourist Passes&lt;&#x2F;h4&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>34</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#footer-passes &gt; ul</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;ul&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>35</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#footer-plan &gt; h4</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;h4&gt;Mars Adventures&lt;&#x2F;h4&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>36</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#footer-plan &gt; ul</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;ul&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>37</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#footer-faq &gt; h4</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;h4&gt;FAQs&lt;&#x2F;h4&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>38</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#footer-faq &gt; ul</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;ul&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>39</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#footer-connect &gt; h4</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;h4&gt;Connect With Us&lt;&#x2F;h4&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>40</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#footer-connect &gt; ul</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;ul&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>41</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#copyright</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;div id&#x3D;&quot;copyright&quot; class&#x3D;&quot;container&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Some page content is not contained by landmarks</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="card violationCard">
                <div class="card-body">
                    <div class="violationCardLine">
                        <h5 class="card-title violationCardTitleItem">
                            <a id="12">12.</a> Select element must have an accessible name
                        </h5>
                        <a
                            href="https:&#x2F;&#x2F;dequeuniversity.com&#x2F;rules&#x2F;axe&#x2F;4.6&#x2F;select-name?application&#x3D;playwright"
                            target="_blank"
                            class="card-link violationCardTitleItem learnMore"
                            >Learn more</a
                        >
                    </div>
                    <div class="violationCardLine">
                        <h6 class="card-subtitle mb-2 text-muted">select-name</h6>
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            WCAG 2 Level A, WCAG 4.1.2
                        </h6>
                    </div>
                    <div class="violationCardLine">
                        <p class="card-text">Ensures select element has an accessible name</p>
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            critical
                        </h6>
                    </div>
                    <div class="violationCardLine">
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            Issue Tags: 
                            <span class="badge bg-light text-dark"> cat.forms </span>

                            <span class="badge bg-light text-dark"> wcag2a </span>

                            <span class="badge bg-light text-dark"> wcag412 </span>

                            <span class="badge bg-light text-dark"> section508 </span>

                            <span class="badge bg-light text-dark"> section508.22.n </span>

                            <span class="badge bg-light text-dark"> ACT </span>
                        </h6>
                    </div>
                    <div class="violationNode">
                        <table class="table table-sm table-bordered">
                            <thead>
                                <tr>
                                    <th style="width: 2%">#</th>
                                    <th style="width: 49%">Issue Description</th>
                                    <th style="width: 49%">
                                        To solve this violation, you need to...
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>1</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#time0</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;select name&#x3D;&quot;time0&quot; id&#x3D;&quot;time0&quot; class&#x3D;&quot;select-time&quot; tabindex&#x3D;&quot;4&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Form element does not have an implicit (wrapped) &lt;label&gt;</li>
                                                <li>  Form element does not have an explicit &lt;label&gt;</li>
                                                <li>  aria-label attribute does not exist or is empty</li>
                                                <li>  aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty</li>
                                                <li>  Element has no title attribute</li>
                                                <li>  Element&#39;s default semantics were not overridden with role&#x3D;&quot;none&quot; or role&#x3D;&quot;presentation&quot;</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>2</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#passenger0 &gt; .age-range.wrapper &gt; .traveler-type</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;select id&#x3D;&quot;traveler0&quot; class&#x3D;&quot;traveler-type&quot;&gt;
&lt;option value&#x3D;&quot;0&quot;&gt;Adult (26+)&lt;&#x2F;option&gt;
&lt;option value&#x3D;&quot;1&quot;&gt;Youth (12-25)&lt;&#x2F;option&gt;
&lt;option value&#x3D;&quot;2&quot;&gt;Child (4-11)&lt;&#x2F;option&gt;
&lt;option value&#x3D;&quot;3&quot;&gt;Senior (60+)&lt;&#x2F;option&gt;
&lt;&#x2F;select&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Form element does not have an implicit (wrapped) &lt;label&gt;</li>
                                                <li>  Form element does not have an explicit &lt;label&gt;</li>
                                                <li>  aria-label attribute does not exist or is empty</li>
                                                <li>  aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty</li>
                                                <li>  Element has no title attribute</li>
                                                <li>  Element&#39;s default semantics were not overridden with role&#x3D;&quot;none&quot; or role&#x3D;&quot;presentation&quot;</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="card violationCard">
                <div class="card-body">
                    <div class="violationCardLine">
                        <h5 class="card-title violationCardTitleItem">
                            <a id="13">13.</a> Elements should not have tabindex greater than zero
                        </h5>
                        <a
                            href="https:&#x2F;&#x2F;dequeuniversity.com&#x2F;rules&#x2F;axe&#x2F;4.6&#x2F;tabindex?application&#x3D;playwright"
                            target="_blank"
                            class="card-link violationCardTitleItem learnMore"
                            >Learn more</a
                        >
                    </div>
                    <div class="violationCardLine">
                        <h6 class="card-subtitle mb-2 text-muted">tabindex</h6>
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            Best practice
                        </h6>
                    </div>
                    <div class="violationCardLine">
                        <p class="card-text">Ensures tabindex attribute values are not greater than 0</p>
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            serious
                        </h6>
                    </div>
                    <div class="violationCardLine">
                        <h6 class="card-subtitle mb-2 text-muted violationCardTitleItem">
                            Issue Tags: 
                            <span class="badge bg-light text-dark"> cat.keyboard </span>

                            <span class="badge bg-light text-dark"> best-practice </span>
                        </h6>
                    </div>
                    <div class="violationNode">
                        <table class="table table-sm table-bordered">
                            <thead>
                                <tr>
                                    <th style="width: 2%">#</th>
                                    <th style="width: 49%">Issue Description</th>
                                    <th style="width: 49%">
                                        To solve this violation, you need to...
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>1</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#from0</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;input type&#x3D;&quot;text&quot; value&#x3D;&quot;&quot; class&#x3D;&quot;city-input ac_input ui-autocomplete-input&quot; autocomplete&#x3D;&quot;off&quot; id&#x3D;&quot;from0&quot; name&#x3D;&quot;from0&quot; tabindex&#x3D;&quot;1&quot; role&#x3D;&quot;textbox&quot; aria-autocomplete&#x3D;&quot;list&quot; aria-haspopup&#x3D;&quot;true&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element has a tabindex greater than 0</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>2</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#to0</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;input type&#x3D;&quot;text&quot; value&#x3D;&quot;&quot; class&#x3D;&quot;city-input ac_input ui-autocomplete-input&quot; autocomplete&#x3D;&quot;off&quot; id&#x3D;&quot;to0&quot; name&#x3D;&quot;to0&quot; tabindex&#x3D;&quot;1&quot; role&#x3D;&quot;textbox&quot; aria-autocomplete&#x3D;&quot;list&quot; aria-haspopup&#x3D;&quot;true&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element has a tabindex greater than 0</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>3</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#deptDate0</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;input size&#x3D;&quot;10&quot; id&#x3D;&quot;deptDate0&quot; name&#x3D;&quot;deptDate0&quot; placeholder&#x3D;&quot;mm&#x2F;dd&#x2F;yyyy&quot; value&#x3D;&quot;&quot; tabindex&#x3D;&quot;3&quot; class&#x3D;&quot;hasDatepicker input-dept&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element has a tabindex greater than 0</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>4</td>
                                    <td>
                                        <p><strong>Element location</strong></p>
                                        <pre><code class="css text-wrap">#time0</code></pre>
                                        <p><strong>Element source</strong></p>
                                        <pre><code class="html text-wrap">&lt;select name&#x3D;&quot;time0&quot; id&#x3D;&quot;time0&quot; class&#x3D;&quot;select-time&quot; tabindex&#x3D;&quot;4&quot;&gt;</code></pre>
                                    </td>
                                    <td>
                                        <div class="wrapBreakWord">
                                            <p>Fix any of the following:</p>
                                            <ul class="text-muted">
                                                <li>  Element has a tabindex greater than 0</li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div id="accordionPasses">
                <div class="card">
                    <div class="card-header" id="headingOne">
                        <h5 class="mb-0">
                            <button
                                class="btn btn-link"
                                data-toggle="collapse"
                                data-target="#passes"
                                aria-expanded="false"
                                aria-controls="passes"
                            >
                                axe returned 43 passed axe
                                checks. Expand details on
                                click
                            </button>
                        </h5>
                    </div>
                    <div
                        id="passes"
                        class="collapse"
                        aria-labelledby="headingOne"
                        data-parent="#accordionPasses"
                    >
                        <div class="card-body">
                            <table class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th style="width: 5%">#</th>
                                        <th style="width: 40%">Description</th>
                                        <th style="width: 5%">Axe rule ID</th>
                                        <th style="width: 15%">WCAG</th>
                                        <th style="width: 5%">Nodes passed check</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <th scope="row">1</th>
                                        <td>Elements must only use allowed ARIA attributes</td>
                                        <td>aria-allowed-attr</td>
                                        <td>WCAG 2 Level A, WCAG 4.1.2</td>
                                        <td>6</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">2</th>
                                        <td>ARIA role should be appropriate for the element</td>
                                        <td>aria-allowed-role</td>
                                        <td>Best practice</td>
                                        <td>22</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">3</th>
                                        <td>aria-hidden&#x3D;&#39;true&#39; must not be present on the document body</td>
                                        <td>aria-hidden-body</td>
                                        <td>WCAG 2 Level A, WCAG 4.1.2</td>
                                        <td>1</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">4</th>
                                        <td>ARIA hidden element must not be focusable or contain focusable elements</td>
                                        <td>aria-hidden-focus</td>
                                        <td>WCAG 2 Level A, WCAG 4.1.2</td>
                                        <td>8</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">5</th>
                                        <td>Required ARIA attributes must be provided</td>
                                        <td>aria-required-attr</td>
                                        <td>WCAG 2 Level A, WCAG 4.1.2</td>
                                        <td>2</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">6</th>
                                        <td>ARIA roles used must conform to valid values</td>
                                        <td>aria-roles</td>
                                        <td>WCAG 2 Level A, WCAG 4.1.2</td>
                                        <td>2</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">7</th>
                                        <td>ARIA attributes must conform to valid values</td>
                                        <td>aria-valid-attr-value</td>
                                        <td>WCAG 2 Level A, WCAG 4.1.2</td>
                                        <td>7</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">8</th>
                                        <td>ARIA attributes must conform to valid names</td>
                                        <td>aria-valid-attr</td>
                                        <td>WCAG 2 Level A, WCAG 4.1.2</td>
                                        <td>7</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">9</th>
                                        <td>autocomplete attribute must be used correctly</td>
                                        <td>autocomplete-valid</td>
                                        <td>WCAG 2.1 Level AA, WCAG 1.3.5</td>
                                        <td>2</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">10</th>
                                        <td>Inline text spacing must be adjustable with custom stylesheets</td>
                                        <td>avoid-inline-spacing</td>
                                        <td>WCAG 2.1 Level AA, WCAG 1.4.1.2</td>
                                        <td>24</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">11</th>
                                        <td>Buttons must have discernible text</td>
                                        <td>button-name</td>
                                        <td>WCAG 2 Level A, WCAG 4.1.2</td>
                                        <td>4</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">12</th>
                                        <td>Page must have means to bypass repeated blocks</td>
                                        <td>bypass</td>
                                        <td>WCAG 2 Level A, WCAG 2.4.1</td>
                                        <td>1</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">13</th>
                                        <td>Elements must have sufficient color contrast</td>
                                        <td>color-contrast</td>
                                        <td>WCAG 2 Level AA, WCAG 1.4.3</td>
                                        <td>51</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">14</th>
                                        <td>Documents must have &lt;title&gt; element to aid in navigation</td>
                                        <td>document-title</td>
                                        <td>WCAG 2 Level A, WCAG 2.4.2</td>
                                        <td>1</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">15</th>
                                        <td>IDs of active elements must be unique</td>
                                        <td>duplicate-id-active</td>
                                        <td>WCAG 2 Level A, WCAG 4.1.1</td>
                                        <td>4</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">16</th>
                                        <td>IDs used in ARIA and labels must be unique</td>
                                        <td>duplicate-id-aria</td>
                                        <td>WCAG 2 Level A, WCAG 4.1.1</td>
                                        <td>27</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">17</th>
                                        <td>id attribute value must be unique</td>
                                        <td>duplicate-id</td>
                                        <td>WCAG 2 Level A, WCAG 4.1.1</td>
                                        <td>156</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">18</th>
                                        <td>Headings should not be empty</td>
                                        <td>empty-heading</td>
                                        <td>Best practice</td>
                                        <td>35</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">19</th>
                                        <td>Form field must not have multiple label elements</td>
                                        <td>form-field-multiple-labels</td>
                                        <td>WCAG 2 Level A, WCAG 3.3.2</td>
                                        <td>16</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">20</th>
                                        <td>Frames should be tested with axe-core</td>
                                        <td>frame-tested</td>
                                        <td>Best practice</td>
                                        <td>3</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">21</th>
                                        <td>Frames must have a unique title attribute</td>
                                        <td>frame-title-unique</td>
                                        <td>WCAG 4.1.2, WCAG 2 Level A</td>
                                        <td>2</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">22</th>
                                        <td>Frames must have an accessible name</td>
                                        <td>frame-title</td>
                                        <td>WCAG 2 Level A, WCAG 4.1.2</td>
                                        <td>2</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">23</th>
                                        <td>Heading levels should only increase by one</td>
                                        <td>heading-order</td>
                                        <td>Best practice</td>
                                        <td>35</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">24</th>
                                        <td>&lt;html&gt; element must have a valid value for the lang attribute</td>
                                        <td>html-lang-valid</td>
                                        <td>WCAG 2 Level A, WCAG 3.1.1</td>
                                        <td>3</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">25</th>
                                        <td>Images must have alternate text</td>
                                        <td>image-alt</td>
                                        <td>WCAG 2 Level A, WCAG 1.1.1</td>
                                        <td>23</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">26</th>
                                        <td>Alternative text of images should not be repeated as text</td>
                                        <td>image-redundant-alt</td>
                                        <td>Best practice</td>
                                        <td>27</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">27</th>
                                        <td>Input buttons must have discernible text</td>
                                        <td>input-button-name</td>
                                        <td>WCAG 2 Level A, WCAG 4.1.2</td>
                                        <td>2</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">28</th>
                                        <td>Form elements should have a visible label</td>
                                        <td>label-title-only</td>
                                        <td>Best practice</td>
                                        <td>16</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">29</th>
                                        <td>Form elements must have labels</td>
                                        <td>label</td>
                                        <td>WCAG 2 Level A, WCAG 4.1.2</td>
                                        <td>14</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">30</th>
                                        <td>Document should have one main landmark</td>
                                        <td>landmark-one-main</td>
                                        <td>Best practice</td>
                                        <td>4</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">31</th>
                                        <td>Links must be distinguishable without relying on color</td>
                                        <td>link-in-text-block</td>
                                        <td>WCAG 2 Level A, WCAG 1.4.1</td>
                                        <td>3</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">32</th>
                                        <td>Links must have discernible text</td>
                                        <td>link-name</td>
                                        <td>WCAG 2 Level A, WCAG 4.1.2, WCAG 2.4.4</td>
                                        <td>133</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">33</th>
                                        <td>&lt;ul&gt; and &lt;ol&gt; must only directly contain &lt;li&gt;, &lt;script&gt; or &lt;template&gt; elements</td>
                                        <td>list</td>
                                        <td>WCAG 2 Level A, WCAG 1.3.1</td>
                                        <td>16</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">34</th>
                                        <td>&lt;li&gt; elements must be contained in a &lt;ul&gt; or &lt;ol&gt;</td>
                                        <td>listitem</td>
                                        <td>WCAG 2 Level A, WCAG 1.3.1</td>
                                        <td>83</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">35</th>
                                        <td>Users should be able to zoom and scale the text up to 500%</td>
                                        <td>meta-viewport-large</td>
                                        <td>Best practice</td>
                                        <td>1</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">36</th>
                                        <td>Zooming and scaling must not be disabled</td>
                                        <td>meta-viewport</td>
                                        <td>WCAG 2 Level AA, WCAG 1.4.4</td>
                                        <td>1</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">37</th>
                                        <td>Interactive controls must not be nested</td>
                                        <td>nested-interactive</td>
                                        <td>WCAG 2 Level A, WCAG 4.1.2</td>
                                        <td>68</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">38</th>
                                        <td>Page should contain a level-one heading</td>
                                        <td>page-has-heading-one</td>
                                        <td>Best practice</td>
                                        <td>4</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">39</th>
                                        <td>Ensure elements marked as presentational are consistently ignored</td>
                                        <td>presentation-role-conflict</td>
                                        <td>Best practice</td>
                                        <td>4</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">40</th>
                                        <td>All page content should be contained by landmarks</td>
                                        <td>region</td>
                                        <td>Best practice</td>
                                        <td>611</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">41</th>
                                        <td>Elements should not have tabindex greater than zero</td>
                                        <td>tabindex</td>
                                        <td>Best practice</td>
                                        <td>3</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">42</th>
                                        <td>tables should not have the same summary and caption</td>
                                        <td>table-duplicate-name</td>
                                        <td>Best practice</td>
                                        <td>2</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">43</th>
                                        <td>Table cells that use the headers attribute must only refer to cells in the same table</td>
                                        <td>td-headers-attr</td>
                                        <td>WCAG 2 Level A, WCAG 1.3.1</td>
                                        <td>2</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <div id="accordionIncomplete">
                <div class="card">
                    <div class="card-header" id="headingTwo">
                        <h5 class="mb-0">
                            <button
                                class="btn btn-link"
                                data-toggle="collapse"
                                data-target="#incomplete"
                                aria-expanded="false"
                                aria-controls="incomplete"
                            >
                                axe returned 4 incomplete checks. Expand
                                details on click
                            </button>
                        </h5>
                    </div>
                    <div
                        id="incomplete"
                        class="collapse"
                        aria-labelledby="headingTwo"
                        data-parent="#accordionIncomplete"
                    >
                        <div class="card-body">
                            <p><em>What 'incomplete' axe checks means?</em></p>
                            <p>
                                Incomplete results were aborted and require further testing. This
                                can happen either because of technical restrictions to what the rule
                                can test, or because a javascript error occurred.
                            </p>
                            <p>
                                <a
                                    href="https://www.deque.com/axe/core-documentation/api-documentation/#results-object"
                                    >Visit axe API Documentation</a
                                >
                                to learn more.
                            </p>
                            <table class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th style="width: 5%">#</th>
                                        <th style="width: 50%">Description</th>
                                        <th style="width: 20%">Axe rule ID</th>
                                        <th style="width: 15%">WCAG</th>
                                        <th style="width: 10%">Nodes with incomplete check</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <th scope="row">1</th>
                                        <td>Elements must only use allowed ARIA attributes</td>
                                        <td>aria-allowed-attr</td>
                                        <td>WCAG 2 Level A, WCAG 4.1.2</td>
                                        <td>1</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">2</th>
                                        <td>Elements must have sufficient color contrast</td>
                                        <td>color-contrast</td>
                                        <td>WCAG 2 Level AA, WCAG 1.4.3</td>
                                        <td>100</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">3</th>
                                        <td>Links must be distinguishable without relying on color</td>
                                        <td>link-in-text-block</td>
                                        <td>WCAG 2 Level A, WCAG 1.4.1</td>
                                        <td>6</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">4</th>
                                        <td>&lt;video&gt; elements must have captions</td>
                                        <td>video-caption</td>
                                        <td>WCAG 2 Level A, WCAG 1.2.2</td>
                                        <td>1</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <div id="accordionInapplicable">
                <div class="card">
                    <div class="card-header" id="headingThree">
                        <h5 class="mb-0">
                            <button
                                class="btn btn-link"
                                data-toggle="collapse"
                                data-target="#inapplicable"
                                aria-expanded="false"
                                aria-controls="inapplicable"
                            >
                                axe returned 40 inapplicable checks.
                                Expand details on click
                            </button>
                        </h5>
                    </div>
                    <div
                        id="inapplicable"
                        class="collapse"
                        aria-labelledby="headingThree"
                        data-parent="#accordionInapplicable"
                    >
                        <div class="card-body">
                            <p><em>What 'inapplicable' axe checks means?</em></p>
                            <p>
                                The inapplicable array lists all the rules for which no matching
                                elements were found on the page.
                            </p>
                            <p>
                                <a
                                    href="https://www.deque.com/axe/core-documentation/api-documentation/#results-object"
                                    >Visit axe API Documentation</a
                                >
                                to learn more.
                            </p>
                            <table class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th style="width: 5%">#</th>
                                        <th style="width: 50%">Description</th>
                                        <th style="width: 20%">Axe rule ID</th>
                                        <th style="width: 15%">WCAG</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <th scope="row">1</th>
                                        <td>accesskey attribute value should be unique</td>
                                        <td>accesskeys</td>
                                        <td>Best practice</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">2</th>
                                        <td>Active &lt;area&gt; elements must have alternate text</td>
                                        <td>area-alt</td>
                                        <td>WCAG 2 Level A, WCAG 2.4.4, WCAG 4.1.2</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">3</th>
                                        <td>ARIA commands must have an accessible name</td>
                                        <td>aria-command-name</td>
                                        <td>WCAG 2 Level A, WCAG 4.1.2</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">4</th>
                                        <td>ARIA dialog and alertdialog nodes should have an accessible name</td>
                                        <td>aria-dialog-name</td>
                                        <td>Best practice</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">5</th>
                                        <td>ARIA input fields must have an accessible name</td>
                                        <td>aria-input-field-name</td>
                                        <td>WCAG 2 Level A, WCAG 4.1.2</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">6</th>
                                        <td>ARIA meter nodes must have an accessible name</td>
                                        <td>aria-meter-name</td>
                                        <td>WCAG 2 Level A, WCAG 1.1.1</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">7</th>
                                        <td>ARIA progressbar nodes must have an accessible name</td>
                                        <td>aria-progressbar-name</td>
                                        <td>WCAG 2 Level A, WCAG 1.1.1</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">8</th>
                                        <td>Certain ARIA roles must contain particular children</td>
                                        <td>aria-required-children</td>
                                        <td>WCAG 2 Level A, WCAG 1.3.1</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">9</th>
                                        <td>Certain ARIA roles must be contained by particular parents</td>
                                        <td>aria-required-parent</td>
                                        <td>WCAG 2 Level A, WCAG 1.3.1</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">10</th>
                                        <td>aria-roledescription must be on elements with a semantic role</td>
                                        <td>aria-roledescription</td>
                                        <td>WCAG 2 Level A, WCAG 4.1.2</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">11</th>
                                        <td>&quot;role&#x3D;text&quot; should have no focusable descendants</td>
                                        <td>aria-text</td>
                                        <td>Best practice</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">12</th>
                                        <td>ARIA toggle fields must have an accessible name</td>
                                        <td>aria-toggle-field-name</td>
                                        <td>WCAG 2 Level A, WCAG 4.1.2</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">13</th>
                                        <td>ARIA tooltip nodes must have an accessible name</td>
                                        <td>aria-tooltip-name</td>
                                        <td>WCAG 2 Level A, WCAG 4.1.2</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">14</th>
                                        <td>ARIA treeitem nodes should have an accessible name</td>
                                        <td>aria-treeitem-name</td>
                                        <td>Best practice</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">15</th>
                                        <td>&lt;blink&gt; elements are deprecated and must not be used</td>
                                        <td>blink</td>
                                        <td>WCAG 2 Level A, WCAG 2.2.2</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">16</th>
                                        <td>&lt;dl&gt; elements must only directly contain properly-ordered &lt;dt&gt; and &lt;dd&gt; groups, &lt;script&gt;, &lt;template&gt; or &lt;div&gt; elements</td>
                                        <td>definition-list</td>
                                        <td>WCAG 2 Level A, WCAG 1.3.1</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">17</th>
                                        <td>&lt;dt&gt; and &lt;dd&gt; elements must be contained by a &lt;dl&gt;</td>
                                        <td>dlitem</td>
                                        <td>WCAG 2 Level A, WCAG 1.3.1</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">18</th>
                                        <td>Table header text should not be empty</td>
                                        <td>empty-table-header</td>
                                        <td>Best practice</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">19</th>
                                        <td>Frames with focusable content must not have tabindex&#x3D;-1</td>
                                        <td>frame-focusable-content</td>
                                        <td>WCAG 2 Level A, WCAG 2.1.1</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">20</th>
                                        <td>HTML elements with lang and xml:lang must have the same base language</td>
                                        <td>html-xml-lang-mismatch</td>
                                        <td>WCAG 2 Level A, WCAG 3.1.1</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">21</th>
                                        <td>Image buttons must have alternate text</td>
                                        <td>input-image-alt</td>
                                        <td>WCAG 2 Level A, WCAG 1.1.1, WCAG 4.1.2</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">22</th>
                                        <td>Banner landmark should not be contained in another landmark</td>
                                        <td>landmark-banner-is-top-level</td>
                                        <td>Best practice</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">23</th>
                                        <td>Aside should not be contained in another landmark</td>
                                        <td>landmark-complementary-is-top-level</td>
                                        <td>Best practice</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">24</th>
                                        <td>Contentinfo landmark should not be contained in another landmark</td>
                                        <td>landmark-contentinfo-is-top-level</td>
                                        <td>Best practice</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">25</th>
                                        <td>Main landmark should not be contained in another landmark</td>
                                        <td>landmark-main-is-top-level</td>
                                        <td>Best practice</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">26</th>
                                        <td>Document should not have more than one banner landmark</td>
                                        <td>landmark-no-duplicate-banner</td>
                                        <td>Best practice</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">27</th>
                                        <td>Document should not have more than one contentinfo landmark</td>
                                        <td>landmark-no-duplicate-contentinfo</td>
                                        <td>Best practice</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">28</th>
                                        <td>Document should not have more than one main landmark</td>
                                        <td>landmark-no-duplicate-main</td>
                                        <td>Best practice</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">29</th>
                                        <td>&lt;marquee&gt; elements are deprecated and must not be used</td>
                                        <td>marquee</td>
                                        <td>WCAG 2 Level A, WCAG 2.2.2</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">30</th>
                                        <td>Delayed refresh under 20 hours must not be used</td>
                                        <td>meta-refresh</td>
                                        <td>WCAG 2 Level A, WCAG 2.2.1</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">31</th>
                                        <td>&lt;object&gt; elements must have alternate text</td>
                                        <td>object-alt</td>
                                        <td>WCAG 2 Level A, WCAG 1.1.1</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">32</th>
                                        <td>[role&#x3D;&#39;img&#39;] elements must have an alternative text</td>
                                        <td>role-img-alt</td>
                                        <td>WCAG 2 Level A, WCAG 1.1.1</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">33</th>
                                        <td>scope attribute should be used correctly</td>
                                        <td>scope-attr-valid</td>
                                        <td>Best practice</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">34</th>
                                        <td>Scrollable region must have keyboard access</td>
                                        <td>scrollable-region-focusable</td>
                                        <td>WCAG 2 Level A, WCAG 2.1.1</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">35</th>
                                        <td>Server-side image maps must not be used</td>
                                        <td>server-side-image-map</td>
                                        <td>WCAG 2 Level A, WCAG 2.1.1</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">36</th>
                                        <td>The skip-link target should exist and be focusable</td>
                                        <td>skip-link</td>
                                        <td>Best practice</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">37</th>
                                        <td>&lt;svg&gt; elements with an img role must have an alternative text</td>
                                        <td>svg-img-alt</td>
                                        <td>WCAG 2 Level A, WCAG 1.1.1</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">38</th>
                                        <td>Table headers in a data table must refer to data cells</td>
                                        <td>th-has-data-cells</td>
                                        <td>WCAG 2 Level A, WCAG 1.3.1</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">39</th>
                                        <td>lang attribute must have a valid value</td>
                                        <td>valid-lang</td>
                                        <td>WCAG 2 Level AA, WCAG 3.1.2</td>
                                    </tr>
                                </tbody>
                                    <tr>
                                        <th scope="row">40</th>
                                        <td>&lt;video&gt; or &lt;audio&gt; elements must not play automatically</td>
                                        <td>no-autoplay-audio</td>
                                        <td>WCAG 2 Level A, WCAG 1.4.2</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <div id="rulesSection">
                <div class="card">
                    <div class="card-header" id="ruleSection">
                        <h5 class="mb-0">
                            <button
                                class="btn btn-link"
                                data-toggle="collapse"
                                data-target="#rules"
                                aria-expanded="false"
                                aria-controls="inapplicable"
                            >
                                axe was running with 0 rules. Expand details on click
                            </button>
                        </h5>
                    </div>
                    <div
                        id="rules"
                        class="collapse"
                        aria-labelledby="ruleSection"
                        data-parent="#rules"
                    >
                        <div class="card-body">
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <script>
            hljs.initHighlightingOnLoad();
        </script>
    </body>
</html>`;
